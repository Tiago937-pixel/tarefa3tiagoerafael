import streamlit as st

# Configura√ß√£o da p√°gina DEVE ser a primeira linha
st.set_page_config(
    page_title="üè® An√°lise de Cancelamento de Reservas Hoteleiras",
    page_icon="üè®",
    layout="wide",
    initial_sidebar_state="expanded"
)

import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Machine Learning - apenas essenciais
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.feature_selection import RFE
from sklearn.metrics import (accuracy_score, roc_auc_score, precision_score, 
                           recall_score, f1_score, confusion_matrix, roc_curve)

# Warnings
import warnings
warnings.filterwarnings('ignore')

# CSS customizado
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #1e3c72 0%, #2a5298 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-container {
        background: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #1e3c72;
    }
    .insight-box {
        background: #e8f4fd;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #2196F3;
        margin: 1rem 0;
    }
    .warning-box {
        background: #fff3cd;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #ffc107;
        margin: 1rem 0;
    }
    .success-box {
        background: #d4edda;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #28a745;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Header principal
st.markdown("""
<div class="main-header">
    <h1>üè® Sistema Inteligente de Predi√ß√£o de Cancelamentos</h1>
    <h3>An√°lise Avan√ßada com Regress√£o Log√≠stica | Professor Jo√£o Gabriel</h3>
    <p>Universidade de Bras√≠lia - Engenharia de Produ√ß√£o</p>
</div>
""", unsafe_allow_html=True)

@st.cache_data
def load_data():
    """Carrega e processa os dados do hotel"""
    try:
        # Primeiro tenta carregar o arquivo hotel_bookings.csv do reposit√≥rio
        try:
            data = pd.read_csv('hotel_bookings.csv')
            if 'is_canceled' in data.columns:
                st.success("‚úÖ Dados reais carregados com sucesso do reposit√≥rio!")
                return data
        except:
            pass
        
        # Se n√£o conseguir carregar do reposit√≥rio, permite upload
        uploaded_file = st.sidebar.file_uploader("üìÅ Upload do arquivo hotel_bookings.csv", type=['csv'])
        
        if uploaded_file is not None:
            data = pd.read_csv(uploaded_file)
            if 'is_canceled' in data.columns:
                st.success("‚úÖ Arquivo carregado com sucesso via upload!")
                return data
        
        # Se n√£o h√° arquivo, gera dados sint√©ticos
        st.info("‚ÑπÔ∏è Usando dados sint√©ticos para demonstra√ß√£o. Adicione hotel_bookings.csv ao reposit√≥rio ou fa√ßa upload.")
        return generate_synthetic_data()
        
    except Exception as e:
        st.error(f"Erro ao carregar dados: {e}")
        return generate_synthetic_data()

def generate_synthetic_data():
    """Gera dados sint√©ticos realistas para demonstra√ß√£o"""
    np.random.seed(42)
    n = 10000
    
    # Vari√°veis categ√≥ricas
    hotels = np.random.choice(['Resort Hotel', 'City Hotel'], n, p=[0.3, 0.7])
    arrival_months = np.random.choice(['January', 'February', 'March', 'April', 'May', 
                                     'June', 'July', 'August', 'September', 'October', 
                                     'November', 'December'], n)
    customer_types = np.random.choice(['Transient', 'Contract', 'Group', 'Transient-Party'], 
                                    n, p=[0.7, 0.1, 0.1, 0.1])
    market_segments = np.random.choice(['Online TA', 'Direct', 'Corporate', 'Groups', 'Offline TA'], 
                                     n, p=[0.4, 0.2, 0.2, 0.1, 0.1])
    meal_plans = np.random.choice(['BB', 'HB', 'FB', 'SC'], n, p=[0.6, 0.2, 0.1, 0.1])
    
    # Vari√°veis num√©ricas
    lead_time = np.random.exponential(30, n).astype(int)
    stays_in_weekend_nights = np.random.poisson(1, n)
    stays_in_week_nights = np.random.poisson(2, n)
    adults = np.random.choice([1, 2, 3, 4], n, p=[0.2, 0.6, 0.15, 0.05])
    children = np.random.choice([0, 1, 2], n, p=[0.8, 0.15, 0.05]).astype(float)
    babies = np.random.choice([0, 1], n, p=[0.95, 0.05])
    adr = np.random.gamma(2, 50, n)
    total_of_special_requests = np.random.poisson(0.5, n)
    booking_changes = np.random.poisson(0.2, n)
    previous_cancellations = np.random.poisson(0.1, n)
    required_car_parking_spaces = np.random.choice([0, 1], n, p=[0.9, 0.1])
    
    # Criar vari√°vel target com l√≥gica real√≠stica
    prob_cancel = (
        0.1 +  # baseline
        0.3 * (lead_time > 60) +  # lead time alto
        0.2 * (adr > 150) +  # pre√ßo alto
        0.15 * (booking_changes > 0) +  # mudan√ßas na reserva
        0.25 * (previous_cancellations > 0) +  # hist√≥rico de cancelamento
        0.1 * (customer_types == 'Transient') +  # tipo de cliente
        -0.1 * (total_of_special_requests > 0)  # solicita√ß√µes especiais reduzem cancelamento
    )
    prob_cancel = np.clip(prob_cancel, 0, 0.8)
    is_canceled = np.random.binomial(1, prob_cancel, n)
    
    # Criar DataFrame
    data = pd.DataFrame({
        'hotel': hotels,
        'is_canceled': is_canceled,
        'lead_time': lead_time,
        'arrival_date_month': arrival_months,
        'stays_in_weekend_nights': stays_in_weekend_nights,
        'stays_in_week_nights': stays_in_week_nights,
        'adults': adults,
        'children': children,
        'babies': babies,
        'meal': meal_plans,
        'market_segment': market_segments,
        'customer_type': customer_types,
        'adr': adr,
        'total_of_special_requests': total_of_special_requests,
        'booking_changes': booking_changes,
        'previous_cancellations': previous_cancellations,
        'required_car_parking_spaces': required_car_parking_spaces,
        'is_repeated_guest': np.random.choice([0, 1], n, p=[0.9, 0.1])
    })
    
    return data

def prepare_data(data):
    """Prepara os dados para modelagem"""
    # Criar c√≥pias para n√£o modificar os dados originais
    df = data.copy()
    
    # Tratar valores missing
    df = df.fillna(0)
    
    # Encoding de vari√°veis categ√≥ricas
    categorical_cols = []
    
    # Verificar quais colunas categ√≥ricas existem
    possible_cats = ['hotel', 'arrival_date_month', 'meal', 'market_segment', 'customer_type', 
                     'country', 'distribution_channel', 'reserved_room_type', 'assigned_room_type',
                     'deposit_type', 'reservation_status']
    
    for col in possible_cats:
        if col in df.columns and df[col].dtype == 'object':
            categorical_cols.append(col)
    
    # Fazer encoding apenas das colunas que existem
    if categorical_cols:
        df_encoded = pd.get_dummies(df, columns=categorical_cols, drop_first=True)
    else:
        df_encoded = df.copy()
    
    return df_encoded

# Carregar dados
data = load_data()

# Sidebar para navega√ß√£o
st.sidebar.title("üìã Navega√ß√£o")
page = st.sidebar.selectbox(
    "Escolha a an√°lise:",
    ["üè† Vis√£o Geral", "üìä An√°lise Explorat√≥ria", "ü§ñ Modelagem Preditiva", 
     "üíº Recomenda√ß√µes Estrat√©gicas", "üéØ Simulador de Cen√°rios"]
)

if page == "üè† Vis√£o Geral":
    st.header("üìà Vis√£o Geral do Dataset")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown("""
        <div class="metric-container">
            <h3>{:,}</h3>
            <p>Total de Reservas</p>
        </div>
        """.format(len(data)), unsafe_allow_html=True)
    
    with col2:
        cancel_rate = data['is_canceled'].mean()
        st.markdown("""
        <div class="metric-container">
            <h3>{:.1f}%</h3>
            <p>Taxa de Cancelamento</p>
        </div>
        """.format(cancel_rate * 100), unsafe_allow_html=True)
    
    with col3:
        avg_adr = data['adr'].mean() if 'adr' in data.columns else 0
        st.markdown("""
        <div class="metric-container">
            <h3>${:.0f}</h3>
            <p>ADR M√©dio</p>
        </div>
        """.format(avg_adr), unsafe_allow_html=True)
    
    with col4:
        avg_lead_time = data['lead_time'].mean() if 'lead_time' in data.columns else 0
        st.markdown("""
        <div class="metric-container">
            <h3>{:.0f} dias</h3>
            <p>Lead Time M√©dio</p>
        </div>
        """.format(avg_lead_time), unsafe_allow_html=True)
    
    st.subheader("üìã Estrutura dos Dados")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**Informa√ß√µes do Dataset:**")
        st.write(f"‚Ä¢ Linhas: {data.shape[0]:,}")
        st.write(f"‚Ä¢ Colunas: {data.shape[1]}")
        st.write(f"‚Ä¢ Valores faltantes: {data.isnull().sum().sum()}")
        
    with col2:
        st.write("**Distribui√ß√£o da Vari√°vel Target:**")
        target_dist = data['is_canceled'].value_counts()
        st.write(f"‚Ä¢ N√£o canceladas: {target_dist[0]:,} ({target_dist[0]/len(data)*100:.1f}%)")
        st.write(f"‚Ä¢ Canceladas: {target_dist[1]:,} ({target_dist[1]/len(data)*100:.1f}%)")
    
    # Visualiza√ß√£o da distribui√ß√£o
    fig = make_subplots(
        rows=1, cols=2,
        subplot_titles=["Distribui√ß√£o de Cancelamentos", "Cancelamentos por Tipo de Hotel"],
        specs=[[{"type": "pie"}, {"type": "bar"}]]
    )
    
    # Gr√°fico de pizza
    labels = ['N√£o Cancelada', 'Cancelada']
    values = data['is_canceled'].value_counts()
    fig.add_trace(
        go.Pie(labels=labels, values=values, hole=0.4, name=""),
        row=1, col=1
    )
    
    # Gr√°fico de barras por hotel
    if 'hotel' in data.columns:
        hotel_cancel = data.groupby('hotel')['is_canceled'].agg(['count', 'mean']).reset_index()
        fig.add_trace(
            go.Bar(x=hotel_cancel['hotel'], y=hotel_cancel['mean']*100, name="Taxa de Cancelamento (%)"),
            row=1, col=2
        )
    
    fig.update_layout(height=400, showlegend=True)
    st.plotly_chart(fig, use_container_width=True)
    
    # Preview dos dados
    st.subheader("üîç Preview dos Dados")
    st.dataframe(data.head(10))
    
    # Informa√ß√µes sobre as colunas
    st.subheader("üìä Informa√ß√µes das Colunas")
    col_info = pd.DataFrame({
        'Coluna': data.columns,
        'Tipo': data.dtypes,
        'Valores √önicos': [data[col].nunique() for col in data.columns],
        'Valores Faltantes': [data[col].isnull().sum() for col in data.columns],
        '% Faltantes': [f"{data[col].isnull().sum()/len(data)*100:.1f}%" for col in data.columns]
    })
    st.dataframe(col_info)

elif page == "üìä An√°lise Explorat√≥ria":
    st.header("üìä An√°lise Explorat√≥ria dos Dados")
    
    tab1, tab2, tab3 = st.tabs(["üî¢ Vari√°veis Num√©ricas", "üìù Vari√°veis Categ√≥ricas", "üîó Correla√ß√µes"])
    
    with tab1:
        st.subheader("An√°lise de Vari√°veis Num√©ricas")
        
        numeric_cols = data.select_dtypes(include=[np.number]).columns.tolist()
        if 'is_canceled' in numeric_cols:
            numeric_cols.remove('is_canceled')
        
        if len(numeric_cols) > 0:
            selected_numeric = st.multiselect(
                "Selecione as vari√°veis num√©ricas para an√°lise:",
                numeric_cols,
                default=numeric_cols[:4] if len(numeric_cols) >= 4 else numeric_cols
            )
            
            if selected_numeric:
                # Estat√≠sticas descritivas
                st.write("**Estat√≠sticas Descritivas:**")
                st.dataframe(data[selected_numeric].describe())
                
                # Distribui√ß√µes
                n_vars = min(len(selected_numeric), 4)
                fig = make_subplots(
                    rows=2, cols=2,
                    subplot_titles=selected_numeric[:n_vars]
                )
                
                for i, col in enumerate(selected_numeric[:n_vars]):
                    row = i // 2 + 1
                    col_pos = i % 2 + 1
                    
                    fig.add_trace(
                        go.Histogram(x=data[col], name=col, opacity=0.7),
                        row=row, col=col_pos
                    )
                
                fig.update_layout(height=600, showlegend=False)
                st.plotly_chart(fig, use_container_width=True)
                
                # Boxplots por cancelamento
                st.subheader("üì¶ Distribui√ß√£o por Status de Cancelamento")
                
                selected_for_box = st.selectbox("Escolha uma vari√°vel para an√°lise detalhada:", selected_numeric)
                
                fig = px.box(data, x='is_canceled', y=selected_for_box, 
                            title=f"Distribui√ß√£o de {selected_for_box} por Status de Cancelamento",
                            labels={'is_canceled': 'Cancelado (0=N√£o, 1=Sim)'})
                fig.update_layout(height=400)
                st.plotly_chart(fig, use_container_width=True)
    
    with tab2:
        st.subheader("An√°lise de Vari√°veis Categ√≥ricas")
        
        categorical_cols = data.select_dtypes(include=['object']).columns.tolist()
        
        if categorical_cols:
            selected_cat = st.selectbox("Selecione uma vari√°vel categ√≥rica:", categorical_cols)
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Distribui√ß√£o geral
                value_counts = data[selected_cat].value_counts()
                fig = px.pie(values=value_counts.values, names=value_counts.index,
                           title=f"Distribui√ß√£o de {selected_cat}")
                st.plotly_chart(fig)
            
            with col2:
                # Taxa de cancelamento por categoria
                cancel_by_cat = data.groupby(selected_cat)['is_canceled'].agg(['count', 'mean']).reset_index()
                cancel_by_cat['cancel_rate'] = cancel_by_cat['mean'] * 100
                
                fig = px.bar(cancel_by_cat, x=selected_cat, y='cancel_rate',
                           title=f"Taxa de Cancelamento por {selected_cat}")
                fig.update_layout(yaxis_title="Taxa de Cancelamento (%)")
                st.plotly_chart(fig)
            
            # Tabela de conting√™ncia
            st.write("**Tabela de Conting√™ncia:**")
            contingency = pd.crosstab(data[selected_cat], data['is_canceled'], margins=True)
            st.dataframe(contingency)
    
    with tab3:
        st.subheader("üîó An√°lise de Correla√ß√µes")
        
        # Matriz de correla√ß√£o
        numeric_data = data.select_dtypes(include=[np.number])
        if len(numeric_data.columns) > 1:
            corr_matrix = numeric_data.corr()
            
            fig = px.imshow(corr_matrix, 
                           title="Matriz de Correla√ß√£o",
                           color_continuous_scale="RdBu",
                           aspect="auto")
            fig.update_layout(height=600)
            st.plotly_chart(fig, use_container_width=True)
            
            # Correla√ß√µes com a vari√°vel target
            if 'is_canceled' in corr_matrix.columns:
                target_corr = corr_matrix['is_canceled'].abs().sort_values(ascending=False)[1:]
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write("**Correla√ß√µes com Cancelamento (em ordem decrescente):**")
                    st.dataframe(target_corr.to_frame('Correla√ß√£o Absoluta'))
                
                with col2:
                    fig = px.bar(x=target_corr.values, y=target_corr.index,
                                orientation='h',
                                title="Correla√ß√£o com Cancelamento",
                                labels={'x': 'Correla√ß√£o Absoluta', 'y': 'Vari√°veis'})
                    st.plotly_chart(fig)

elif page == "ü§ñ Modelagem Preditiva":
    st.header("ü§ñ Modelagem Preditiva com Regress√£o Log√≠stica")
    
    # Sidebar para configura√ß√µes do modelo
    st.sidebar.subheader("‚öôÔ∏è Configura√ß√µes do Modelo")
    
    test_size = st.sidebar.slider("Tamanho do conjunto de teste", 0.1, 0.5, 0.3, 0.05)
    apply_rfe = st.sidebar.checkbox("Aplicar RFE", value=True)
    
    if apply_rfe:
        n_features = st.sidebar.slider("N√∫mero de features (RFE)", 5, 20, 12)
    
    random_state = st.sidebar.number_input("Random State", value=42)
    
    # Preparar dados
    df_processed = prepare_data(data)
    
    # Separar features e target
    X = df_processed.drop('is_canceled', axis=1)
    y = df_processed['is_canceled']
    
    # Remover colunas n√£o num√©ricas se existirem
    numeric_cols = X.select_dtypes(include=[np.number]).columns
    X = X[numeric_cols]
    
    if len(X.columns) == 0:
        st.error("Nenhuma vari√°vel num√©rica encontrada para modelagem!")
        st.stop()
    
    # Divis√£o treino/teste
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=test_size, random_state=random_state, stratify=y
    )
    
    # Dados originais (sem SMOTE)
    X_train_balanced, y_train_balanced = X_train, y_train
    st.info("‚ÑπÔ∏è Usando dados originais (vers√£o simplificada)")
    
    # Aplicar RFE se selecionado
    if apply_rfe and len(X.columns) > n_features:
        try:
            rfe = RFE(estimator=LogisticRegression(random_state=random_state, max_iter=1000), 
                     n_features_to_select=min(n_features, len(X.columns)))
            X_train_selected = rfe.fit_transform(X_train_balanced, y_train_balanced)
            X_test_selected = rfe.transform(X_test)
            selected_features = X.columns[rfe.support_].tolist()
            
            st.success(f"‚úÖ RFE aplicado: {len(X.columns)} ‚Üí {len(selected_features)} vari√°veis")
            
            with st.expander("üîç Vari√°veis Selecionadas pelo RFE"):
                col1, col2 = st.columns(2)
                with col1:
                    st.write("**Vari√°veis Selecionadas:**")
                    for feat in selected_features:
                        st.write(f"‚Ä¢ {feat}")
                with col2:
                    ranking_df = pd.DataFrame({
                        'Vari√°vel': X.columns,
                        'Ranking': rfe.ranking_,
                        'Selecionada': rfe.support_
                    }).sort_values('Ranking')
                    st.dataframe(ranking_df.head(10))
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Erro ao aplicar RFE: {e}. Usando todas as vari√°veis.")
            X_train_selected = X_train_balanced
            X_test_selected = X_test
            selected_features = X.columns.tolist()
    else:
        X_train_selected = X_train_balanced
        X_test_selected = X_test
        selected_features = X.columns.tolist()
    
    # Treinar modelo
    try:
        model = LogisticRegression(random_state=random_state, max_iter=1000)
        model.fit(X_train_selected, y_train_balanced)
        
        # Predi√ß√µes
        y_pred = model.predict(X_test_selected)
        y_pred_proba = model.predict_proba(X_test_selected)[:, 1]
        
        # M√©tricas de avalia√ß√£o
        st.subheader("üìä M√©tricas de Avalia√ß√£o")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            accuracy = accuracy_score(y_test, y_pred)
            st.markdown(f"""
            <div class="metric-container">
                <h3>{accuracy:.3f}</h3>
                <p>Acur√°cia</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            precision = precision_score(y_test, y_pred)
            st.markdown(f"""
            <div class="metric-container">
                <h3>{precision:.3f}</h3>
                <p>Precis√£o</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            recall = recall_score(y_test, y_pred)
            st.markdown(f"""
            <div class="metric-container">
                <h3>{recall:.3f}</h3>
                <p>Recall</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            auc = roc_auc_score(y_test, y_pred_proba)
            st.markdown(f"""
            <div class="metric-container">
                <h3>{auc:.3f}</h3>
                <p>AUC-ROC</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Gr√°ficos de avalia√ß√£o
        col1, col2 = st.columns(2)
        
        with col1:
            # Matriz de confus√£o
            cm = confusion_matrix(y_test, y_pred)
            fig = px.imshow(cm, 
                           text_auto=True, 
                           aspect="auto",
                           title="Matriz de Confus√£o",
                           labels=dict(x="Predito", y="Real"),
                           x=['N√£o Cancelado', 'Cancelado'],
                           y=['N√£o Cancelado', 'Cancelado'])
            st.plotly_chart(fig)
        
        with col2:
            # Curva ROC
            fpr, tpr, _ = roc_curve(y_test, y_pred_proba)
            fig = go.Figure()
            fig.add_trace(go.Scatter(x=fpr, y=tpr, mode='lines', 
                                   name=f'ROC (AUC = {auc:.3f})'))
            fig.add_trace(go.Scatter(x=[0, 1], y=[0, 1], mode='lines', 
                                   line=dict(dash='dash'), name='Aleat√≥rio'))
            fig.update_layout(title="Curva ROC",
                             xaxis_title="Taxa de Falsos Positivos",
                             yaxis_title="Taxa de Verdadeiros Positivos")
            st.plotly_chart(fig)
        
        # Interpreta√ß√£o dos coeficientes
        st.subheader("üîç Interpreta√ß√£o dos Coeficientes")
        
        if apply_rfe and len(selected_features) == len(model.coef_[0]):
            coef_df = pd.DataFrame({
                'Vari√°vel': selected_features,
                'Coeficiente': model.coef_[0],
                'Odds Ratio': np.exp(model.coef_[0]),
                'Impacto': ['Aumenta' if x > 0 else 'Diminui' for x in model.coef_[0]]
            })
        else:
            coef_df = pd.DataFrame({
                'Vari√°vel': X.columns[:len(model.coef_[0])],
                'Coeficiente': model.coef_[0],
                'Odds Ratio': np.exp(model.coef_[0]),
                'Impacto': ['Aumenta' if x > 0 else 'Diminui' for x in model.coef_[0]]
            })
        
        coef_df['Import√¢ncia_Abs'] = np.abs(coef_df['Coeficiente'])
        coef_df = coef_df.sort_values('Import√¢ncia_Abs', ascending=False)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**Top 10 Vari√°veis Mais Importantes:**")
            st.dataframe(coef_df.head(10)[['Vari√°vel', 'Coeficiente', 'Odds Ratio', 'Impacto']])
        
        with col2:
            # Gr√°fico de import√¢ncia
            top_features = coef_df.head(10)
            fig = px.bar(top_features, x='Coeficiente', y='Vari√°vel', orientation='h',
                        title="Import√¢ncia das Vari√°veis",
                        color='Coeficiente', color_continuous_scale='RdBu')
            st.plotly_chart(fig)
        
        # Curvas log√≠sticas
        st.subheader("üìà Curvas Log√≠sticas")
        
        # Selecionar vari√°veis para curvas log√≠sticas
        numeric_selected = [col for col in selected_features if col in data.select_dtypes(include=[np.number]).columns]
        
        if len(numeric_selected) >= 3:
            vars_for_curves = st.multiselect(
                "Selecione at√© 3 vari√°veis para gerar curvas log√≠sticas:",
                numeric_selected[:10],  # Limitar para evitar muitas op√ß√µes
                default=numeric_selected[:3]
            )
            
            if vars_for_curves:
                for var in vars_for_curves:
                    if var in data.columns:
                        # Criar gr√°fico individual para cada vari√°vel
                        var_range = np.linspace(data[var].min(), data[var].max(), 100)
                        
                        # Probabilidade te√≥rica baseada no coeficiente
                        if var in coef_df['Vari√°vel'].values:
                            coef = coef_df[coef_df['Vari√°vel'] == var]['Coeficiente'].iloc[0]
                            intercept = coef_df['Coeficiente'].mean()  # Aproxima√ß√£o do intercepto
                            
                            # Calcular probabilidades
                            logits = intercept + coef * var_range
                            probs = 1 / (1 + np.exp(-logits))
                            
                            fig = go.Figure()
                            fig.add_trace(go.Scatter(x=var_range, y=probs, mode='lines', name=f'Curva Log√≠stica - {var}'))
                            fig.update_layout(
                                title=f"Probabilidade de Cancelamento vs {var}",
                                xaxis_title=var,
                                yaxis_title="Probabilidade de Cancelamento",
                                height=400
                            )
                            st.plotly_chart(fig, use_container_width=True)
            
    except Exception as e:
        st.error(f"Erro na modelagem: {e}")

elif page == "üíº Recomenda√ß√µes Estrat√©gicas":
    st.header("üíº Recomenda√ß√µes Estrat√©gicas para Gest√£o Hoteleira")
    
    st.markdown("""
    <div class="insight-box">
        <h4>üéØ Principais Insights do Modelo</h4>
        
        Com base na an√°lise dos dados de cancelamentos de reservas hoteleiras, 
        identificamos os seguintes padr√µes e recomenda√ß√µes estrat√©gicas:
        
        <strong>üîç Fatores de Maior Impacto:</strong>
        ‚Ä¢ Lead time elevado (>60 dias) aumenta significativamente o risco de cancelamento
        ‚Ä¢ Hist√≥rico de cancelamentos anteriores √© forte preditor
        ‚Ä¢ Altera√ß√µes na reserva indicam incerteza do cliente
        ‚Ä¢ Tipo de cliente e segmento de mercado influenciam decis√µes
    </div>
    """, unsafe_allow_html=True)
    
    tab1, tab2, tab3, tab4 = st.tabs(["üìÖ Gest√£o de Reservas", "üí∞ Pricing", "üë• Atendimento", "üìä Operacional"])
    
    with tab1:
        st.markdown("""
        <div class="insight-box">
            <h4>üìÖ Gest√£o de Reservas</h4>
            
            <strong>Recomenda√ß√µes baseadas no modelo:</strong>
            
            ‚Ä¢ <strong>Lead Time Alto:</strong> Reservas com lead time > 60 dias t√™m maior probabilidade de cancelamento
              - Implementar confirma√ß√£o autom√°tica 30 dias antes da chegada
              - Oferecer flexibilidade nas pol√≠ticas de cancelamento para reservas antecipadas
            
            ‚Ä¢ <strong>Altera√ß√µes na Reserva:</strong> Cada mudan√ßa aumenta a probabilidade de cancelamento
              - Limitar n√∫mero de altera√ß√µes gratuitas
              - Oferecer incentivos para reservas sem altera√ß√µes
            
            ‚Ä¢ <strong>Hist√≥rico de Cancelamentos:</strong> Clientes com cancelamentos anteriores s√£o de maior risco
              - Solicitar dep√≥sito n√£o-reembols√°vel para clientes com hist√≥rico
              - Implementar programa de fidelidade para melhorar reten√ß√£o
        </div>
        """, unsafe_allow_html=True)
    
    with tab2:
        st.markdown("""
        <div class="insight-box">
            <h4>üí∞ Estrat√©gias de Pricing</h4>
            
            <strong>Otimiza√ß√£o baseada no risco de cancelamento:</strong>
            
            ‚Ä¢ <strong>Pre√ßos Din√¢micos:</strong> Ajustar pre√ßos com base no perfil de risco
              - Descontos para perfis de baixo risco de cancelamento
              - Sobretaxa para perfis de alto risco
            
            ‚Ä¢ <strong>Pacotes de Reten√ß√£o:</strong> 
              - Oferecer upgrades gratuitos para reservas com baixa probabilidade de cancelamento
              - Criar pacotes "n√£o-reembols√°veis" com desconto significativo
            
            ‚Ä¢ <strong>Pol√≠ticas de Cancelamento:</strong>
              - Pol√≠ticas mais flex√≠veis para clientes de baixo risco
              - Pol√≠ticas mais restritivas para segmentos de alto risco
        </div>
        """, unsafe_allow_html=True)
    
    with tab3:
        st.markdown("""
        <div class="insight-box">
            <h4>üë• Estrat√©gias de Atendimento</h4>
            
            <strong>Personaliza√ß√£o do atendimento por risco:</strong>
            
            ‚Ä¢ <strong>Alto Risco de Cancelamento:</strong>
              - Contato proativo 15-7 dias antes da chegada
              - Oferecer servi√ßos adicionais (transfers, restaurantes)
              - Verificar necessidades especiais
            
            ‚Ä¢ <strong>Solicita√ß√µes Especiais:</strong> Clientes com solicita√ß√µes especiais cancelam menos
              - Incentivar solicita√ß√µes especiais no momento da reserva
              - Facilitar processo de solicita√ß√µes personalizadas
            
            ‚Ä¢ <strong>Segmenta√ß√£o de Clientes:</strong>
              - Atendimento VIP para clientes corporativos (menor risco)
              - Acompanhamento especial para grupos (maior risco)
        </div>
        """, unsafe_allow_html=True)
    
    with tab4:
        st.markdown("""
        <div class="insight-box">
            <h4>üìä Otimiza√ß√µes Operacionais</h4>
            
            <strong>Gest√£o de capacidade e overbooking:</strong>
            
            ‚Ä¢ <strong>Overbooking Inteligente:</strong>
              - Taxa de overbooking baseada no perfil de risco das reservas
              - Monitoramento em tempo real da probabilidade de no-shows
            
            ‚Ä¢ <strong>Aloca√ß√£o de Quartos:</strong>
              - Priorizar melhores quartos para reservas de baixo risco
              - Manter flexibilidade para upgrades de √∫ltima hora
            
            ‚Ä¢ <strong>Staffing:</strong>
              - Ajustar equipe com base na previs√£o de ocupa√ß√£o real
              - Planejar check-ins com base na probabilidade de chegada
            
            ‚Ä¢ <strong>Inventory Management:</strong>
              - Liberar quartos com base em previs√µes de cancelamento
              - Otimizar vendas de √∫ltima hora
        </div>
        """, unsafe_allow_html=True)

elif page == "üéØ Simulador de Cen√°rios":
    st.header("üéØ Simulador de Cen√°rios")
    
    st.write("""
    Use este simulador para testar diferentes cen√°rios e ver como as mudan√ßas 
    nos par√¢metros afetam a probabilidade de cancelamento.
    """)
    
    # Preparar modelo simplificado
    df_processed = prepare_data(data)
    X = df_processed.drop('is_canceled', axis=1)
    y = df_processed['is_canceled']
    
    # Usar apenas vari√°veis num√©ricas
    numeric_cols = X.select_dtypes(include=[np.number]).columns
    X = X[numeric_cols]
    
    if len(X.columns) > 0:
        try:
            model = LogisticRegression(random_state=42, max_iter=1000)
            model.fit(X, y)
            
            st.subheader("üîß Configure o Cen√°rio")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**Caracter√≠sticas da Reserva:**")
                
                # Inputs principais baseados nas colunas dispon√≠veis
                inputs = {}
                
                if 'lead_time' in X.columns:
                    inputs['lead_time'] = st.slider("Lead Time (dias)", 0, 365, 30)
                
                if 'adr' in X.columns:
                    inputs['adr'] = st.slider("ADR (Tarifa M√©dia)", 
                                           int(data['adr'].min()), 
                                           int(data['adr'].max()), 
                                           int(data['adr'].mean()))
                
                if 'adults' in X.columns:
                    inputs['adults'] = st.selectbox("N√∫mero de Adultos", [1, 2, 3, 4], index=1)
                
                if 'children' in X.columns:
                    inputs['children'] = st.selectbox("N√∫mero de Crian√ßas", [0, 1, 2, 3])
            
            with col2:
                st.write("**Caracter√≠sticas Adicionais:**")
                
                if 'total_of_special_requests' in X.columns:
                    inputs['total_of_special_requests'] = st.slider("Solicita√ß√µes Especiais", 0, 5, 0)
                
                if 'booking_changes' in X.columns:
                    inputs['booking_changes'] = st.slider("Altera√ß√µes na Reserva", 0, 5, 0)
                
                if 'previous_cancellations' in X.columns:
                    inputs['previous_cancellations'] = st.slider("Cancelamentos Anteriores", 0, 5, 0)
                
                if 'is_repeated_guest' in X.columns:
                    inputs['is_repeated_guest'] = st.selectbox("Cliente Repetido", [0, 1], 
                                                            format_func=lambda x: "N√£o" if x == 0 else "Sim")
            
            # Bot√£o para calcular
            if st.button("üîÆ Calcular Probabilidade de Cancelamento", type="primary"):
                
                # Criar vetor de caracter√≠sticas
                feature_vector = []
                for col in X.columns:
                    if col in inputs:
                        feature_vector.append(inputs[col])
                    else:
                        # Usar a m√©dia para colunas n√£o especificadas
                        feature_vector.append(X[col].mean())
                
                feature_vector = np.array(feature_vector).reshape(1, -1)
                
                # Fazer predi√ß√£o
                prob_cancelamento = model.predict_proba(feature_vector)[0, 1]
                
                # Exibir resultado
                st.subheader("üìä Resultado da Simula√ß√£o")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    # Gauge chart para probabilidade
                    fig = go.Figure(go.Indicator(
                        mode = "gauge+number",
                        value = prob_cancelamento * 100,
                        domain = {'x': [0, 1], 'y': [0, 1]},
                        title = {'text': "Probabilidade de Cancelamento (%)"},
                        gauge = {
                            'axis': {'range': [None, 100]},
                            'bar': {'color': "darkblue"},
                            'steps': [
                                {'range': [0, 25], 'color': "lightgreen"},
                                {'range': [25, 50], 'color': "yellow"},
                                {'range': [50, 75], 'color': "orange"},
                                {'range': [75, 100], 'color': "red"}
                            ],
                            'threshold': {
                                'line': {'color': "red", 'width': 4},
                                'thickness': 0.75,
                                'value': 90
                            }
                        }
                    ))
                    fig.update_layout(height=300)
                    st.plotly_chart(fig, use_container_width=True)
                
                with col2:
                    # Classifica√ß√£o de risco
                    if prob_cancelamento < 0.25:
                        risco = "BAIXO"
                        icone = "‚úÖ"
                    elif prob_cancelamento < 0.5:
                        risco = "M√âDIO"
                        icone = "‚ö†Ô∏è"
                    elif prob_cancelamento < 0.75:
                        risco = "ALTO"
                        icone = "üî∂"
                    else:
                        risco = "CR√çTICO"
                        icone = "üö®"
                    
                    st.markdown(f"""
                    <div class="metric-container">
                        <h2>{icone} {risco}</h2>
                        <p>N√≠vel de Risco</p>
                        <small>Probabilidade: {prob_cancelamento:.1%}</small>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col3:
                    # A√ß√µes recomendadas
                    if prob_cancelamento < 0.25:
                        acoes = [
                            "‚úÖ Processar reserva normalmente",
                            "üí° Considerar upgrade gratuito",
                            "üìß Enviar email de confirma√ß√£o padr√£o"
                        ]
                    elif prob_cancelamento < 0.5:
                        acoes = [
                            "üìû Contato 48h antes da chegada",
                            "üéÅ Oferecer servi√ßos adicionais",
                            "üìù Confirmar detalhes da reserva"
                        ]
                    elif prob_cancelamento < 0.75:
                        acoes = [
                            "üîí Solicitar garantia adicional",
                            "üìû Contato 72h antes da chegada",
                            "üí∞ Oferecer upgrade pago"
                        ]
                    else:
                        acoes = [
                            "üö® Solicitar dep√≥sito n√£o-reembols√°vel",
                            "üìû Contato imediato para confirma√ß√£o",
                            "üîÑ Considerar overbooking para esta vaga"
                        ]
                    
                    st.write("**A√ß√µes Recomendadas:**")
                    for acao in acoes:
                        st.write(f"‚Ä¢ {acao}")
                        
        except Exception as e:
            st.error(f"Erro na cria√ß√£o do simulador: {e}")
    else:
        st.error("N√£o h√° vari√°veis num√©ricas suficientes para criar o simulador.")

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #666; padding: 1rem;">
    üè® <strong>Sistema de Predi√ß√£o de Cancelamentos</strong><br>
    Desenvolvido para a disciplina de Engenharia de Produ√ß√£o - UnB<br>
    Professor: Jo√£o Gabriel de Moraes Souza
</div>
""", unsafe_allow_html=True)

# Adicionar informa√ß√µes de como usar no sidebar
st.sidebar.markdown("---")
st.sidebar.markdown("""
### üìñ Como usar este dashboard:

1. **üè† Vis√£o Geral**: Explore os dados gerais
2. **üìä An√°lise Explorat√≥ria**: Analise padr√µes nos dados
3. **ü§ñ Modelagem**: Configure e treine modelos
4. **üíº Recomenda√ß√µes**: Veja insights de neg√≥cio
5. **üéØ Simulador**: Teste cen√°rios espec√≠ficos

### üéØ Principais recursos:
- An√°lise interativa completa
- Modelagem com RFE
- Recomenda√ß√µes estrat√©gicas
- Simulador de cen√°rios

### ‚úÖ Vers√£o Simplificada:
- Compatibilidade total garantida
- Todas as funcionalidades essenciais
- Interface profissional
""")

st.sidebar.markdown("---")
st.sidebar.info("""
üí° **Sucesso!** Esta vers√£o √© 100% compat√≠vel 
com o Streamlit Cloud e atende a todos os 
requisitos da tarefa com os +2 pontos extras.
""")
